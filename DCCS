from sqlalchemy import create_engine
from forex_python.converter import CurrencyRates
import sqlite3
from cryptography.fernet import Fernet
import IFP
import EmailSender

db_connect = create_engine('sqlite:///data.db')
db = sqlite3.connect('transactions.db')
dub = db.cursor()


def create_accnt_option(accnt_name2=str, email2=str, addy2=str, cou2=str, cur2=str, Ans=str):
    c_value = Fernet.generate_key()
    Crypt = c_value[:5]
    if Ans == "1":
        a_type1 = "Credit"
        Credit_Checking_amt = int(input('How much do you want to deposit into your Credit Checkings account p.s. no '
                                        'min deposit '
                                        'required max '
                                        'deposit is '
                                        '3000: '))
        if Credit_Checking_amt > 3000 or Credit_Checking_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        Credit_Savings_amt = int(
            input('How much do you want to deposit into your Credit Savings account p.s. no min deposit '
                  'required max '
                  'deposit is '
                  '5000: '))
        if Credit_Savings_amt > 5000 or Credit_Savings_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        read_data = "INSERT INTO InovClientsBusinessData (name, email, SDC, DCL, Credit, Checking, Saving, Address, " \
                    "Country, " \
                    "Currency) " \
                    "VALUES ( " \
                    "?, " \
                    "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
        val = (accnt_name2, email2, Crypt, c_value, a_type1, Credit_Checking_amt, Credit_Savings_amt, addy2, cou2, cur2)
        db.execute(read_data, val)
        db.close()
    if Ans == "2":
        create_accnt(accnt_name2, email2, addy2, cou2, cur2)


def create_accnt(accnt_name=str, email=str, addy=str, cou=str, cur=str):
    c_value = Fernet.generate_key()
    Crypt = c_value[:5]
    print('please choose')
    print('1. Credit and Debit account')
    print('2. Credit or Debit')
    Accnt_type = input()
    if Accnt_type == "1":
        Accnt_type1 = 'Credit account'
        Accnt_type2 = 'Debit account'
        Credit_Checking_amt = int(input('How much do you want to deposit into your Credit Checkings account p.s. no '
                                        'min deposit '
                                        'required max '
                                        'deposit is '
                                        '3000: '))
        if Credit_Checking_amt > 3000 or Credit_Checking_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        Credit_Savings_amt = int(
            input('How much do you want to deposit into your Credit Savings account p.s. no min deposit '
                  'required max '
                  'deposit is '
                  '5000: '))
        if Credit_Savings_amt > 5000 or Credit_Savings_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        Debit_Checking_amt = int(input('How much do you want to deposit into your Debit Checkings account p.s. no '
                                       'min deposit '
                                       'required max '
                                       'deposit is '
                                       '3000: '))
        if Debit_Checking_amt > 3000 or Debit_Checking_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        Debit_Savings_amt = int(
            input('How much do you want to deposit into your Debit Savings account p.s. no min deposit '
                  'required max '
                  'deposit is '
                  '5000: '))
        if Debit_Savings_amt > 5000 or Debit_Savings_amt < 0:
            print("deposit does not meet requirement, try again")
            IFP.OpenAccount()
        read_data = "INSERT INTO InovClientsJointAccountData (name, email, SDC, DCL, CreditAccount, CreditChecking, " \
                    "CreditSaving, DebitAccount, " \
                    "DebitChecking, " \
                    "DebitSaving, Address, Country, " \
                    "Currency) " \
                    "VALUES ( " \
                    "?, " \
                    "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
        val = (accnt_name, email, Crypt, c_value, Accnt_type1, Credit_Checking_amt, Credit_Savings_amt, Accnt_type2,
               Debit_Checking_amt, Debit_Savings_amt, addy, cou, cur)
        db.execute(read_data, val)
        db.close()
        dclNo = '{} this is your secured credit number, this number will be your main account charged with most ' \
                'transactions you make.' \
                'This is to ensure safer payment and build a more secure wall around your credit. Please memorize ' \
                'these first five digits. '
        print(dclNo.format(Crypt))
        print("Account created")
    if Accnt_type == "2":
        print("please choose which account you'd like to create")
        print("1. Credit")
        print("2. Debit")
        accnt_type = input()
        if accnt_type == "1":
            a_type1 = "Credit Account"
            current = int(input('How much do you want to deposit into this account p.s. no min deposit required max '
                                'deposit is '
                                '3000: '))
            if current > 3000 or current < 0:
                print("deposit does not meet requirement, try again")
                IFP.OpenAccount()
            savings = int(input('How much do you want to deposit into this account p.s. no min deposit required max '
                                'deposit is '
                                '5000: '))
            if savings > 5000 or savings < 0:
                print("deposit does not meet requirement, try again")
                IFP.OpenAccount()
            sql = "INSERT INTO InovClientsData (name, email, SDC, DCL, Type, Current, Saving, Address, Country, " \
                  "Currency) " \
                  "VALUES ( " \
                  "?, " \
                  "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
            val = (accnt_name, email, Crypt, c_value, a_type1, current, savings, addy, cou, cur)
            db.execute(sql, val)
            db.close()
            dclNo = '{} this is your secured credit number, this number will be your main account charged with most ' \
                    'transactions you make.' \
                    'This is to ensure safer payment and build a more secure wall around your credit. Please memorize ' \
                    'these first five digits. '
            print(dclNo.format(Crypt))
            print("Account created")


def enter_deposit_Checking(x=str, y=int):
    conn = db_connect.connect()
    conn.execute("UPDATE InovClientsData SET Current=Current+? WHERE name=?", [y, x])
    conn.close()


def enter_deposit_Savings(x=str, y=int):
    conn = db_connect.connect()
    conn.execute("UPDATE InovClientsData SET Saving=Saving+? WHERE name=?", [y, x])
    conn.close()


def use_atm_Checking(d=str, f=int, r=int):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [f, d])
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [r, d])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [r])
    conn.close()


def use_atm_Savings(d=str, f=int, r=int):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Saving=Saving-? WHERE name=?', [f, d])
    conn.execute('UPDATE InovClientsData SET Saving=Saving-? WHERE name=?', [r, d])
    conn.execute('UPDATE InovClientsData SET Saving=Saving+? WHERE name=INOV Financials Inc.', [r])
    conn.close()


def get_new_pin(n=str, z=int):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET SDC=? WHERE name=?', [z, n])
    conn.close()


def new_Crypt():
    conn = db_connect.connect()
    name = input("please enter the full name your account is in: ")
    pin = input("please enter your temporary pin: ")
    data_current = conn.execute("SELECT name, Type FROM InovClientsData WHERE SDC=?", [pin])
    res = data_current.fetchall()
    for x in res:
        print("Account Name = ", x[0])
        print("Account Type = ", x[1])
    c_value = Fernet.generate_key()
    Crypt = c_value[:5]
    dclNo = '{} this is your secured credit code, this number will be your main account charged with most ' \
            'transactions you make.' \
            'This is to ensure safer payment and build a more secure wall around your credit.'
    print(dclNo.format(Crypt))
    conn.execute('UPDATE InovClientsData SET DCL=? WHERE name=?', [c_value, name])
    conn.execute('UPDATE InovClientsData SET SDC=? WHERE name=?', [Crypt, name])
    conn.close()
    # EmailSender.send_mail_for_new_Crypt(Crypt, email)
    IFP.intro()


def send_money(t=int, n1=str, n2=str):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [t, n1])

    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=?', [t, n2])
    conn.close()


def get_businessloan_checking(bl1=int, n3=str):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=?', [bl1, n3])
    conn.close()


def get_businessloan_savings(bl2=int, n4=str):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Saving=Saving+? WHERE name=?', [bl2, n4])
    conn.close()


def get_personalloan_checking(bl3=int, n5=str):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=?', [bl3, n5])
    conn.commit()


def get_personalloan_Savings(bl4=int, n6=str):
    conn = db_connect.connect()
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=?', [bl4, n6])
    conn.close()


def get_CurrencyExchange_USD(gov=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var1 = "USD"
    cex1 = c.get_rate('USD', 'USD')
    cex2 = c.get_rate('USD', 'USD')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/? Currency=? WHERE name=?',
                 [cex1, cex2, var1, gov])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def get_CurrencyExchange_EUR(gov2=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var2 = "EUR"
    dex1 = c.get_rate('USD', 'EUR')
    dex2 = c.get_rate('USD', 'EUR')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/?, Currency=? WHERE name=?',
                 [dex1, dex2, var2, gov2])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov2])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov2])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def get_CurrencyExchange_GBP(gov3=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var3 = "GBP"
    fex3 = c.get_rate('USD', 'GBP')
    fex4 = c.get_rate('USD', 'GBP')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/?, Currency=? WHERE name=?',
                 [fex3, fex4, var3, gov3])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov3])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov3])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def get_CurrencyExchange_AUS(gov4=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var4 = "AUS"
    gex4 = c.get_rate('USD', 'AUS')
    gex5 = c.get_rate('USD', 'AUS')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/?, Currency=? WHERE name=?',
                 [gex4, gex5, var4, gov4])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov4])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov4])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def get_CurrencyExchange_CNY(gov5=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var5 = "CNY"
    hex5 = c.get_rate('USD', 'CNY')
    hex6 = c.get_rate('USD', 'CNY')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/?, Currency=? WHERE name=?',
                 [hex5, hex6, var5, gov5])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov5])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov5])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def get_CurrencyExchange_JPY(gov6=str):
    conn = db_connect.connect()
    c = CurrencyRates()
    var6 = "JPY"
    hex6 = c.get_rate('USD', 'JPY')
    hex7 = c.get_rate('USD', 'JPY')
    conn.execute('UPDATE InovClients SET Current=Current/?, Saving=Saving/?, Currency=? WHERE name=?',
                 [hex6, hex7, var6, gov6])
    print("You will be charged 1.3% upon this exchange")
    rate_r = 1.50
    conn.execute('UPDATE InovClientsData SET Current=Current-? WHERE name=?', [rate_r, gov6])
    conn.execute('UPDATE InovClientsData SET Current=Savings-? WHERE name=?', [rate_r, gov6])
    conn.execute('UPDATE InovClientsData SET Current=Current+? WHERE name=INOV Financials Inc.', [rate_r])
    conn.close()


def global_transfers(region=int, val=int, curname=str, curname2=str, cur=str, cur2=str, name=str, name2=str):
    c = CurrencyRates()
    # North American Region
    if region == "1":
        if curname == "US Dollar" and curname2 == "Canadian Dollar":
            reg = "North America"
            cur = 'USD'
            cur2 = 'CAD'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    if region == "1":
        if curname == "US Dollar" and curname2 == "Peso":
            reg = "North America"
            cur = 'USD'
            cur2 = 'MXN'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    if region == "1":
        if curname == "Canadian dollar" and curname2 == "US dollar":
            reg = "North America"
            cur = 'CAD'
            cur2 = 'USD'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    if region == "1":
        if curname == "Canadian dollar" and curname2 == "Peso":
            reg = "North America"
            cur = 'CAD'
            cur2 = 'MXN'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    if region == "1":
        if curname == "Peso" and curname2 == "Canadian dollar":
            reg = "North America"
            cur = 'MXN'
            cur2 = 'CAD'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    if region == "1":
        if curname == "Peso" and curname2 == "US dollar":
            reg = "North America"
            cur = 'MXN'
            cur2 = 'USD'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, " \
                        "?) "
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
            print("Transaction complete")
    # South American Region
    if region == "2":
        if curname == "US dollar" and curname2 == "Argentine Peso":
            reg = "South America"
            cur = 'USD'
            cur2 = 'ARS'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Bolivian Boliviano":
            reg = "South America"
            cur = 'USD'
            cur2 = 'BOB'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Brazilian Real":
            reg = "South America"
            cur = 'USD'
            cur2 = 'BRL'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Chilean Peso":
            reg = "South America"
            cur = 'USD'
            cur2 = 'CLP'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Colombian Peso":
            reg = "South America"
            cur = 'USD'
            cur2 = 'COP'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Colombian Peso":
            reg = "South America"
            cur = 'USD'
            cur2 = 'COP'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Peruvian Sol":
            reg = "South America"
            cur = 'USD'
            cur2 = 'PEN'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Ecuador":
            reg = "South America"
            # cur = 'USD'
            # cur2 = 'PEN'
            # link = c.convert(cur2, cur, val)
            send_money(val, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, val, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Venezuelan Bolívar Soberano":
            reg = "South America"
            cur = 'USD'
            cur2 = 'VES'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
        if curname == "US dollar" and curname2 == "Uruguayan Peso":
            reg = "South America"
            cur = 'USD'
            cur2 = 'UYU'
            link = c.convert(cur2, cur, val)
            send_money(link, name, name2)
            data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
            data_src = (name, link, reg, cur2)
            dub.execute(data_link, data_src)
            db.commit()
    if region == "3":
        reg = "Europe"
        link = c.convert(cur2, cur, val)
        send_money(link, name, name2)
        data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
        data_src = (name, link, reg, cur2)
        dub.execute(data_link, data_src)
        db.commit()
    if region == "4":
        reg = "Africa"
        link = c.convert(cur2, cur, val)
        send_money(link, name, name2)
        data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
        data_src = (name, link, reg, cur2)
        dub.execute(data_link, data_src)
        db.commit()
    if region == "5":
        reg = "Asia"
        link = c.convert(cur2, cur, val)
        send_money(link, name, name2)
        data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
        data_src = (name, link, reg, cur2)
        dub.execute(data_link, data_src)
        db.commit()
    if region == "6":
        reg = "Caribbean"
        link = c.convert(cur2, cur, val)
        send_money(link, name, name2)
        data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
        data_src = (name, link, reg, cur2)
        dub.execute(data_link, data_src)
        db.commit()
    if region == "7":
        reg = "Central America"
        link = c.convert(cur2, cur, val)
        send_money(link, name, name2)
        data_link = "INSERT INTO BankTransactions (name, Value, Region, Currency) VALUES (?, ?, ?, ?)"
        data_src = (name, link, reg, cur2)
        dub.execute(data_link, data_src)
        db.commit()


def loan_system(name=str, email=str):
    print("Personal loans are given at an interest rate of 1.5%")
    print("Loan amounts for range from 5,000 - 100,000")
    personal_loan = int(input("please enter loan amount: "))
    if personal_loan == 5000:
        r = 0.015
        n = 12
        p = personal_loan * (1 - (1 + r) ^ -n) / r
        result = "Your Loan has been granted INOV, you will be paying {} monthly over a 12 month " \
                 "period "
        print(result.format(p))
    if 5000 > personal_loan <= 75000:
        r = 0.015
        n = 24
        p = personal_loan * (1 - (1 + r) ^ -n) / r
        result = "Your Loan has been granted INOV, you will be paying {} monthly over a 24 month " \
                 "period "
        print(result.format(p))
    if 75000 > personal_loan <= 100000:
        r = 0.015
        n = 24
        p = personal_loan * (1 - (1 + r) ^ -n) / r
        result = "Your Loan has been granted from Monetary Transatlantic Bank, you will be paying {} monthly over " \
                 "a " \
                 "36 month period "
        print(result.format(p))
    print("Where would you like to deposit this loan")
    print("========== (1). Current ==========")
    print("========== (2). Savings ==========")
    choice = input()
    if choice == "1":
        get_personalloan_checking(personal_loan, name)
    if choice == "2":
        get_personalloan_Savings(personal_loan, name)

    EmailSender.send_mail_for_personal_loan(email, personal_loan, choice)
