from sqlalchemy import create_engine
# import sqlite3

# Personal Credit/Debit Account Database
db_connect = create_engine('sqlite:///data.db')


def delete_Personal_accnt(name=str, email=str):
    conn = db_connect.connect()
    conn.execute("DELETE from InovClientsData WHERE name=?, email=?", name, email)
    conn.close()
    print("account deleted")


def get_PersonalAccnt_access(name=str, cryp=str):
    conn = db_connect.connect()
    sort = conn.execute('SELECT name, SDC, IIF(name=?, SDC=?, \'Login successful\', \'login failed\') FROM '
                        'InovClientsData;', name, cryp)
    print(sort)


def get_PersonalAccnt_Country():
    conn = db_connect.connect()
    sort = conn.execute("select name, Country from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Clients Country of Residence")
    print(result)


def get_PersonalAccnt_PIN():
    conn = db_connect.connect()
    sort = conn.execute("select name, SDC from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Pins of clients:")
    print(result)


def get_PersonalAccnt_DCL():
    conn = db_connect.connect()
    sort = conn.execute("select name, DCL from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Digital credit of clients:")
    print(result)


def get_PersonalAccnt_Currency():
    conn = db_connect.connect()
    sort = conn.execute("select name, Currency from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_PersonalAccnt_Address():
    conn = db_connect.connect()
    sort = conn.execute("select name, Currency from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_PersonalAccnt_CurrentBalance():
    conn = db_connect.connect()
    sort = conn.execute("select name, Current from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Current Balance of clients:")
    print(result)


def get_PersonalAccnt_SavingBalance():
    conn = db_connect.connect()
    sort = conn.execute("select name, Saving from InovClientsData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Savings Balance of clients:")
    print(result)


# Business Credit Account Database
cd_connect = create_engine('sqlite:///BusinessAccntdata.db')



def get_BusinessAccnt_access(name=str, cryp=str):
    cd = cd_connect.connect()
    sort = cd.execute('SELECT name, SDC, IIF(name=?, SDC=?, \'Login successful\', \'login failed\') FROM '
                      'InovClientsBusinessData;', name, cryp)
    print(sort)


def delete_Business_accnt(name=str, email=str):
    cd = cd_connect.connect()
    cd.execute("DELETE from InovClientsBusinessData WHERE name=?, email=?", name, email)
    cd.close()
    print("account deleted")


def get_BusinessAccnt_Country():
    cd = cd_connect.connect()
    sort = cd.execute("select name, Country from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Clients Country of Residence")
    print(result)


def get_BusinessAccnt_PIN():
    cd = cd_connect.connect()
    sort = cd.execute("select name, SDC from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Pins of clients:")
    print(result)


def get_BusinessAccnt_DCL():
    cd = cd_connect.connect()
    sort = cd.execute("select name, DCL from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Digital credit of clients:")
    print(result)


def get_BusinessAccnt_Currency():
    cd = cd_connect.connect()
    sort = cd.execute("select name, Currency from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_BusinessAccnt_Address():
    cd = cd_connect.connect()
    sort = cd.execute("select name, Currency from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_BusinessAccnt_CurrentBalance():
    cd = cd_connect.connect()
    sort = cd.execute("select name, Current from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Current Balance of clients:")
    print(result)


def get_BusinessAccnt_SavingBalance():
    cd = cd_connect.connect()
    sort = cd.execute("select name, Saving from InovClientsBusinessData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Savings Balance of clients:")
    print(result)


# Transactions Database
db = create_engine('sqlite:///transactions.db')



def get_all_Transactions():
    dub = db.connect()
    sort = dub.execute("select name, Value, Region, Currency from BankTransactions ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("All Transaction Information:")
    print(result)


# Personal Credit & Debit Account Database
pcd_connect = create_engine('sqlite:///JointAccountdata.db')



def delete_Personaljoint_accnt(name=str, email=str):
    pcd = pcd_connect.connect()
    pcd.execute("DELETE from InovClientsJointAccountData WHERE name=?, WHERE email=?", name, email)
    pcd.close()
    print("account deleted")


def get_PersonaljointAccnt_access(name=str, cryp=str):
    cd = cd_connect.connect()
    sort = cd.execute('SELECT name, SDC, IIF(name=?, SDC=?, \'Login successful\', \'login failed\') FROM '
                      'InovClientsJointAccountData;', name, cryp)
    print(sort)


def get_PersonaljointAccnt_Country():
    pcd = pcd_connect.connect()
    sort = pcd.execute("select name, Country from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Clients Country of Residence")
    print(result)


def get_PersonaljointAccnt_PIN():
    pcd = pcd_connect.connect()
    sort = pcd.execute("select name, SDC from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Pins of clients:")
    print(result)


def get_PersonaljointAccnt_DCL():
    pcd = pcd_connect.connect()
    sort = pcd.execute("select name, DCL from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Digital credit of clients:")
    print(result)


def get_PersonaljointAccnt_Currency():
    conn = db_connect.connect()
    sort = conn.execute("select name, Currency from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_PersonaljointAccnt_Address():
    conn = db_connect.connect()
    sort = conn.execute("select name, Currency from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Domestic currencies of clients:")
    print(result)


def get_PersonaljointAccnt_CurrentBalance():
    conn = db_connect.connect()
    sort = conn.execute("select name, Current from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Current Balance of clients:")
    print(result)


def get_PersonaljointAccnt_SavingBalance():
    conn = db_connect.connect()
    sort = conn.execute("select name, Saving from InovClientsJointAccountData ")
    result = {'data': [dict(zip(tuple(sort.keys()), i)) for i in sort.cursor]}
    print("Savings Balance of clients:")
    print(result)

def Intro():
    print("Please choose")
    print("1. Personal Account")
    print("2. Business Account")
    print("3. Transactions")
    print("4. Quit")

    ans = input()
    if ans == "1":
        get_PersonalAccnt_Country()
        get_PersonalAccnt_PIN()
        get_PersonalAccnt_DCL()
        get_PersonalAccnt_Currency()
        get_PersonalAccnt_Address()
        get_PersonalAccnt_CurrentBalance()
        get_PersonalAccnt_SavingBalance()
    if ans == "2":
        get_BusinessAccnt_Country()
        get_BusinessAccnt_PIN()
        get_BusinessAccnt_DCL()
        get_BusinessAccnt_Currency()
        get_BusinessAccnt_Address()
        get_BusinessAccnt_CurrentBalance()
        get_BusinessAccnt_SavingBalance()
    if ans == "3":
        get_all_Transactions()
    if ans == "4":
        exit()


if __name__ == '__main__':
    Intro()
